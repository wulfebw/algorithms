---
overview
---

---
getting started
---
- algorithms 
    - add_binary [CHECK]
    - insertion_sort [CHECK]
    - linear_search [CHECK]
    - merge_sort [CHECK]
    - selection_sort [CHECK]
    - binary_search [CHECK]
    - exercise 2.3-7 two_sum_to [CHECK]
    - problem 2-1 merge_insertion_sort [CHECK]
    - problem 2-2 bubblesort [CHECK]
    - problem 2-4 []
- concepts
    - how to exactly measure time complexity
    - how to 'prove' a function to be correct
    - loop invariance 
    - proving a loop is invariant

---
growth of functions
---
- concepts
    - big theta
    - big O
    - big Omega
    - little o
    - little omega
    - limits (e.g., lhopitals) (for comparing functions you're not sure about e.g., logn vs sqrt(n))
    - different ways of establishing these bounds
        - proof from definition
            - literally finding constants c1, c2, n0 such that the definitions hold
        - lim -> inf
        - proof of theta from bigO and bigOmega
    - stirlings formula for factorials
    - asymptotic notions
    - monotinicity
    - floor and ceiling
    - mod
    - polynomials
    - exp
    - log
        - not that all the log bases are in the same bigTheta
    - factorials
    - iterated factorial
    - iterated log
    - fib

---
divide-and-conquer
---
- algorithms
    - maximum sub-array [CHECK]
    - multiplying matricies [CHECK]
        - normally [CHECK]
        - Strassen’s algorithm []

- concepts
    - recurrences
        - particularly 
            - T(n) = aT(n-b) + f(n)
            - T(n) = aT(n/b) + f(n)
    - how to arrive at T(n) of an equation (and/or a recursive form of it)?
    - solving recurrences, or, determining run times of divide-conquer algorithms
        - substitution
            - pitfalls
        - recursion tree
        - master method
    - proof of master theorem
    - change of variables to allow for applying master theorem
        - e.g., sqrt (this results in log log)
    - maximum subarray problem
    - multiplying matricies
        - proof of Strassen’s algorithm time complexity
    - why do ceiling and floor not matter asymptotically?

---
Probabilistic Analysis and Randomized Algorithms
---
- algorithms
    - exercise 5.1-2 []
    - exercise 5.1-3 biased_random [CHECK]
    - random permutation [CHECK]
    - unsorted search [CHECK]
    - probabilistic counter [CHECK]

- concepts
    - analyzing cost of an algorithm rather than run time (equivalent analysis)
    - probabilistic analysis
    - randomized algorithms
    - indicator variables (all of these are great probability-based algorithm questions)
        - birthday paradox
        - throwing balls in bins
        - streaks
        - on-line hiring problem

